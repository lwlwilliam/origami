{
  "if statement": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// code}",
      "}"
    ],
    "description": "If statement"
  },
  "if-else statement": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// code}",
      "} else {",
      "\t${3:// code}",
      "}"
    ],
    "description": "If-else statement"
  },
  "if-elseif-else statement": {
    "prefix": "ifelseif",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// code}",
      "} elseif (${3:condition}) {",
      "\t${4:// code}",
      "} else {",
      "\t${5:// code}",
      "}"
    ],
    "description": "If-elseif-else statement"
  },
  "for loop": {
    "prefix": "for",
    "body": [
      "for ($${1:i} = ${2:0}; $${1:i} < ${3:count}; $${1:i}++) {",
      "\t${4:// code}",
      "}"
    ],
    "description": "For loop"
  },
  "foreach loop": {
    "prefix": "foreach",
    "body": [
      "foreach ($${1:array} as $${2:item}) {",
      "\t${3:// code}",
      "}"
    ],
    "description": "Foreach loop"
  },
  "foreach with key": {
    "prefix": "foreachkey",
    "body": [
      "foreach ($${1:array} as $${2:key} => $${3:value}) {",
      "\t${4:// code}",
      "}"
    ],
    "description": "Foreach loop with key"
  },
  "while loop": {
    "prefix": "while",
    "body": [
      "while (${1:condition}) {",
      "\t${2:// code}",
      "}"
    ],
    "description": "While loop"
  },
  "do-while loop": {
    "prefix": "dowhile",
    "body": [
      "do {",
      "\t${1:// code}",
      "} while (${2:condition});"
    ],
    "description": "Do-while loop"
  },
  "switch statement": {
    "prefix": "switch",
    "body": [
      "switch ($${1:variable}) {",
      "\tcase ${2:value}:",
      "\t\t${3:// code}",
      "\t\tbreak;",
      "\tdefault:",
      "\t\t${4:// code}",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch statement"
  },
  "try-catch": {
    "prefix": "try",
    "body": [
      "try {",
      "\t${1:// code}",
      "} catch (${2:Exception} $${3:e}) {",
      "\t${4:// handle exception}",
      "}"
    ],
    "description": "Try-catch block"
  },
  "try-catch-finally": {
    "prefix": "tryfinally",
    "body": [
      "try {",
      "\t${1:// code}",
      "} catch (${2:Exception} $${3:e}) {",
      "\t${4:// handle exception}",
      "} finally {",
      "\t${5:// cleanup code}",
      "}"
    ],
    "description": "Try-catch-finally block"
  },
  "function": {
    "prefix": "function",
    "body": [
      "function ${1:functionName}(${2:parameters}) {",
      "\t${3:// code}",
      "\treturn ${4:value};",
      "}"
    ],
    "description": "Function declaration"
  },
  "class": {
    "prefix": "class",
    "body": [
      "class ${1:ClassName} {",
      "\tpublic function __construct(${2:parameters}) {",
      "\t\t${3:// constructor code}",
      "\t}",
      "",
      "\tpublic function ${4:methodName}(${5:parameters}) {",
      "\t\t${6:// method code}",
      "\t\treturn ${7:value};",
      "\t}",
      "}"
    ],
    "description": "Class declaration"
  },
  "public method": {
    "prefix": "pubmethod",
    "body": [
      "public function ${1:methodName}(${2:parameters}) {",
      "\t${3:// code}",
      "\treturn ${4:value};",
      "}"
    ],
    "description": "Public method"
  },
  "private method": {
    "prefix": "privmethod",
    "body": [
      "private function ${1:methodName}(${2:parameters}) {",
      "\t${3:// code}",
      "\treturn ${4:value};",
      "}"
    ],
    "description": "Private method"
  },
  "protected method": {
    "prefix": "protmethod",
    "body": [
      "protected function ${1:methodName}(${2:parameters}) {",
      "\t${3:// code}",
      "\treturn ${4:value};",
      "}"
    ],
    "description": "Protected method"
  },
  "namespace": {
    "prefix": "namespace",
    "body": [
      "namespace ${1:NamespaceName};",
      "",
      "${2:// code}"
    ],
    "description": "Namespace declaration"
  },
  "use statement": {
    "prefix": "use",
    "body": [
      "use ${1:NamespaceName\\ClassName};"
    ],
    "description": "Use statement"
  },
  "echo": {
    "prefix": "echo",
    "body": [
      "echo ${1:\"Hello, World!\"};"
    ],
    "description": "Echo statement"
  },
  "var_dump": {
    "prefix": "dump",
    "body": [
      "var_dump($${1:variable});"
    ],
    "description": "Variable dump"
  },
  "array": {
    "prefix": "array",
    "body": [
      "$${1:arrayName} = [${2:values}];"
    ],
    "description": "Array declaration"
  },
  "associative array": {
    "prefix": "assocarray",
    "body": [
      "$${1:arrayName} = [",
      "\t'${2:key}' => '${3:value}',",
      "\t'${4:key}' => '${5:value}'",
      "];"
    ],
    "description": "Associative array declaration"
  },
  "variable": {
    "prefix": "var",
    "body": [
      "$${1:variableName} = ${2:value};"
    ],
    "description": "Variable declaration"
  },
  "constant": {
    "prefix": "const",
    "body": [
      "const ${1:CONSTANT_NAME} = ${2:value};"
    ],
    "description": "Constant declaration"
  },
  "return": {
    "prefix": "return",
    "body": [
      "return ${1:value};"
    ],
    "description": "Return statement"
  },
  "break": {
    "prefix": "break",
    "body": [
      "break;"
    ],
    "description": "Break statement"
  },
  "continue": {
    "prefix": "continue",
    "body": [
      "continue;"
    ],
    "description": "Continue statement"
  },
  "throw": {
    "prefix": "throw",
    "body": [
      "throw new ${1:Exception}(${2:\"Error message\"});"
    ],
    "description": "Throw exception"
  },
  "new instance": {
    "prefix": "new",
    "body": [
      "$${1:instance} = new ${2:ClassName}(${3:parameters});"
    ],
    "description": "Create new instance"
  },
  "instanceof": {
    "prefix": "instanceof",
    "body": [
      "if ($${1:object} instanceof ${2:ClassName}) {",
      "\t${3:// code}",
      "}"
    ],
    "description": "Instanceof check"
  }
}