{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Origami",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.origami",
          "match": "\\b(if|else|elseif|while|for|foreach|do|switch|case|default|break|continue|return|try|catch|finally|throw)\\b"
        },
        {
          "name": "keyword.declaration.origami",
          "match": "\\b(class|interface|trait|function|namespace|use|extends|implements|abstract|final|static|private|protected|public|const|var)\\b"
        },
        {
          "name": "keyword.other.origami",
          "match": "\\b(new|instanceof|clone|echo|print|include|require|include_once|require_once|global|unset|isset|empty|die|exit|eval)\\b"
        },
        {
          "name": "constant.language.origami",
          "match": "\\b(true|false|null|TRUE|FALSE|NULL)\\b"
        },
        {
          "name": "support.class.origami",
          "match": "\\b(this|self|parent|static)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.origami",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.origami",
              "match": "\\\\."
            },
            {
              "include": "#variables"
            }
          ]
        },
        {
          "name": "string.quoted.single.origami",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.origami",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.origami",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.origami",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.origami",
          "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.hex.origami",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.octal.origami",
          "match": "\\b0[0-7]+\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.origami",
          "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.origami",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*\\()"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.origami",
          "match": "=|\\+=|-=|\\*=|/=|%=|\\.=|&=|\\|=|\\^=|<<=|>>="
        },
        {
          "name": "keyword.operator.comparison.origami",
          "match": "==|!=|<>|===|!==|<|>|<=|>=|<=>|\\?\\?"
        },
        {
          "name": "keyword.operator.logical.origami",
          "match": "&&|\\|\\||!|and|or|xor"
        },
        {
          "name": "keyword.operator.arithmetic.origami",
          "match": "\\+|-|\\*|/|%|\\*\\*"
        },
        {
          "name": "keyword.operator.bitwise.origami",
          "match": "&|\\||\\^|~|<<|>>"
        },
        {
          "name": "keyword.operator.string.origami",
          "match": "\\."
        },
        {
          "name": "keyword.operator.increment.origami",
          "match": "\\+\\+|--"
        },
        {
          "name": "keyword.operator.object.origami",
          "match": "->|::"
        }
      ]
    }
  },
  "scopeName": "source.origami"
}