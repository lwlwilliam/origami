<?php

// Channel 异步通讯测试示例
echo "=== Channel 异步通讯测试 ===\n";

// 创建默认容量的 channel（无缓冲）
$channel1 = new Channel();
echo "默认 Channel 容量: " . $channel1->cap() . "\n";

// 创建指定容量的 channel
$channel2 = new Channel(50);
echo "指定容量 Channel 容量: " . $channel2->cap() . "\n";

// 创建小容量的 channel
$channel3 = new Channel(5);
echo "小容量 Channel 容量: " . $channel3->cap() . "\n";

// 测试默认 channel
echo "\n--- 默认 Channel 测试（无缓冲） ---\n";
echo "Channel 长度: " . $channel1->len() . "\n";

// 发送测试
echo "\n--- 发送测试 ---\n";
$result1 = $channel1->send("数据1");
echo "发送结果1: " . ($result1 ? "成功" : "失败") . "\n";

$result2 = $channel1->send("数据2");
echo "发送结果2: " . ($result2 ? "成功" : "失败") . "\n";

echo "Channel 长度: " . $channel1->len() . "\n";

// 接收测试（对齐 Go 的用法）
echo "\n--- 接收测试 ---\n";
$value1 = $channel1->receive();
echo "接收数据1: " . ($value1 !== null ? $value1 : "无数据") . "\n";

$value2 = $channel1->receive();
echo "接收数据2: " . ($value2 !== null ? $value2 : "无数据") . "\n";

echo "Channel 长度: " . $channel1->len() . "\n";

// 发送数据
echo "\n--- 发送数据 ---\n";
$result3 = $channel1->send("数据3");
echo "发送结果3: " . ($result3 ? "成功" : "失败") . "\n";

// 接收数据（Go 风格的接收）
echo "\n--- 接收数据 ---\n";
$value3 = $channel1->receive();
echo "接收数据: " . ($value3 !== null ? $value3 : "无数据") . "\n";

// 关闭 channel
echo "\n--- 关闭 Channel ---\n";
$channel1->close();
echo "Channel 已关闭\n";

echo "Channel 是否关闭: " . ($channel1->isClosed() ? "是" : "否") . "\n";

// 尝试向已关闭的 channel 发送数据
$result4 = $channel1->send("关闭后的数据");
echo "向已关闭 channel 发送结果: " . ($result4 ? "成功" : "失败") . "\n";

echo "\n=== 异步通讯测试完成 ===\n";

// 模拟生产者-消费者模式（使用小容量 channel）
echo "\n=== 生产者-消费者模式示例（小容量） ===\n";

// 模拟生产者
echo "生产者发送数据...\n";
$prodChannel = new Channel(3); // 小容量，更容易测试缓冲区满的情况

for ($i = 1; $i <= 5; $i++) {
    $result = $prodChannel->send("产品" . $i);
    echo "发送产品{$i}: " . ($result ? "成功" : "失败") . "\n";
}

echo "生产者发送完成，Channel 长度: " . $prodChannel->len() . "\n";

// 模拟消费者
echo "消费者接收数据...\n";
while ($prodChannel->len() > 0) {
    $product = $prodChannel->receive();
    if ($product !== null) {
        echo "消费: " . $product . "\n";
    }
}

$prodChannel->close();
echo "生产者-消费者模式完成\n";

// 测试容量限制
echo "\n=== 容量限制测试 ===\n";
$smallChannel = new Channel(2);
echo "小容量 Channel 容量: " . $smallChannel->cap() . "\n";

// 尝试发送超过容量的数据
for ($i = 1; $i <= 4; $i++) {
    $result = $smallChannel->send("数据" . $i);
    echo "发送数据{$i}: " . ($result ? "成功" : "失败") . "\n";
}

echo "Channel 长度: " . $smallChannel->len() . "\n";

// 接收数据
while ($smallChannel->len() > 0) {
    $data = $smallChannel->receive();
    echo "接收: " . $data . "\n";
}

$smallChannel->close();
echo "容量限制测试完成\n"; 