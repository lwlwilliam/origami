namespace App;

/**
 * HTTP 服务器 API 使用示例
 * 
 * 本文件展示了 Origami 语言中 HTTP 服务器的各种 API 使用方法：
 * - 基本路由设置 (GET, POST, PUT, DELETE)
 * - 请求参数获取 (formValue, postFormValue, pathValue)
 * - 请求头操作 (header, userAgent, referer)
 * - Cookie 操作
 * - 文件上传处理
 * - 中间件使用
 * - 路由组管理
 * - 错误处理和状态码
 * - CORS 处理
 * - 限流和日志记录
 * - API 版本控制
 */

$server = new Net\Http\Server("0.0.0.0", port: 8080);

$server->get("/", ($request, $response) => {
    $response->write("Hello Word");
})

$group = $server->group("/user");

$group->middleware(($request, $response, $next) => {
    echo "中间件开始\n"

    $next($request, $response)

    echo "中间件结束\n"
})

$group->get("/list", ($request, $response) => {
    $response->json({
        "list": "aaaa"
    });
})

// 获取查询参数示例
$server->get("/search", ($request, $response) => {
    $keyword = $request->formValue("keyword");
    $page = $request->formValue("page");
    
    $response->json({
        "keyword": $keyword,
        "page": $page,
        "message": "搜索功能"
    });
})

// POST 请求处理示例
$server->post("/user", ($request, $response) => {
    $name = $request->postFormValue("name");
    $email = $request->postFormValue("email");
    
    $response->json({
        "message": "用户创建成功",
        "user": {
            "name": $name,
            "email": $email
        }
    });
})

// 路径参数示例
$server->get("/user/{id}", ($request, $response) => {
    $userId = $request->pathValue("id");
    
    $response->json({
        "message": "获取用户信息",
        "userId": $userId
    });
})

// 请求头操作示例
$server->get("/headers", ($request, $response) => {
    $userAgent = $request->userAgent();
    $referer = $request->referer();
    
    // 设置响应头
    $response->header("X-Custom-Header", "MyValue");
    $response->header("Content-Type", "application/json");
    
    $response->json({
        "userAgent": $userAgent,
        "referer": $referer,
        "message": "请求头信息"
    });
})

// Cookie 操作示例
$server->get("/cookie", ($request, $response) => {
    // 获取 Cookie
    $cookie = $request->cookie("sessionId");
    
    // 设置 Cookie
    $response->header("Set-Cookie", "sessionId=abc123; Path=/; HttpOnly");
    
    $response->json({
        "sessionId": $cookie,
        "message": "Cookie 操作"
    });
})

// 文件上传示例
$server->post("/upload", ($request, $response) => {
    $file = $request->formFile("file");
    
    if ($file != null) {
        $response->json({
            "message": "文件上传成功",
            "filename": $file->filename,
            "size": $file->size
        });
    } else {
        $response->writeHeader(400);
        $response->json({
            "error": "没有上传文件"
        });
    }
})

// PUT 请求示例
$server->put("/user/{id}", ($request, $response) => {
    $userId = $request->pathValue("id");
    $name = $request->postFormValue("name");
    
    $response->json({
        "message": "用户更新成功",
        "userId": $userId,
        "name": $name
    });
})

// DELETE 请求示例
$server->delete("/user/{id}", ($request, $response) => {
    $userId = $request->pathValue("id");
    
    $response->json({
        "message": "用户删除成功",
        "userId": $userId
    });
})

// 错误处理示例
$server->get("/error", ($request, $response) => {
    $response->writeHeader(500);
    $response->json({
        "error": "服务器内部错误",
        "code": 500
    });
})

// 更多中间件示例
$server->middleware(($request, $response, $next) => {
    echo "全局中间件开始\n";

    // 可以在这里进行身份验证、日志记录等
    $authToken = $request->header("Authorization");
    if ($authToken == null) {
        $response->writeHeader(401);
        $response->json({
            "error": "未授权访问"
        });
        return;
    }

    $next($request, $response);
    echo "全局中间件结束\n";
})

// 路由组中间件示例
$adminGroup = $server->group("/admin");

$adminGroup->middleware(($request, $response, $next) => {
    echo "管理员中间件\n";
    
    $role = $request->header("X-User-Role");
    if ($role != "admin") {
        $response->writeHeader(403);
        $response->json({
            "error": "权限不足"
        });
        return;
    }
    
    $next($request, $response);
})

$adminGroup->get("/dashboard", ($request, $response) => {
    $response->json({
        "message": "管理员面板",
        "data": {
            "users": 100,
            "orders": 50
        }
    });
})

// CORS 中间件示例
$server->middleware(($request, $response, $next) => {
    $response->header("Access-Control-Allow-Origin", "*");
    $response->header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
    $response->header("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Requested-With");
    
    // 处理预检请求
    if ($request->Method == "OPTIONS") {
        $response->writeHeader(200);
        return;
    }
    
    $next($request, $response);
})

// 静态文件服务示例
$server->get("/static/*", ($request, $response) => {
    $path = $request->URL->Path;
    $filePath = "public" . $path;
    
    // 这里可以实现静态文件服务逻辑
    $response->header("Content-Type", "text/plain");
    $response->write("静态文件: " . $filePath);
})

// JSON 请求体解析示例
$server->post("/api/data", ($request, $response) => {
    // 获取请求体内容
    $body = $request->Body;
    
    $response->json({
        "message": "收到 JSON 数据",
        "body": $body
    });
})

// 查询参数处理示例
$server->get("/api/users", ($request, $response) => {
    $page = $request->formValue("page") ?? "1";
    $limit = $request->formValue("limit") ?? "10";
    $sort = $request->formValue("sort") ?? "id";
    
    $response->json({
        "users": [],
        "pagination": {
            "page": $page,
            "limit": $limit,
            "sort": $sort
        }
    });
})

// 多部分表单数据示例
$server->post("/api/profile", ($request, $response) => {
    // 解析表单数据
    $request->parseForm();
    
    $name = $request->formValue("name");
    $email = $request->formValue("email");
    $avatar = $request->formFile("avatar");
    
    $response->json({
        "message": "个人资料更新成功",
        "data": {
            "name": $name,
            "email": $email,
            "hasAvatar": $avatar != null
        }
    });
})

// 请求验证中间件
$server->middleware(($request, $response, $next) => {
    $contentType = $request->header("Content-Type");
    
    // 验证内容类型
    if ($request->method() == "POST" && $contentType != "application/json" && $contentType != "application/x-www-form-urlencoded") {
        $response->writeHeader(400);
        $response->json({
            "error": "不支持的内容类型"
        });
        return;
    }
    
    $next($request, $response);
})

// 日志记录中间件
$server->middleware(($request, $response, $next) => {
    $startTime = time();
    
    $next($request, $response);
    
    $duration = time() - $startTime;
    Log::info("请求处理完成: " . $request->method() . " " . $request->path() . " 耗时: " . $duration . "秒");
})

// 请求体记录中间件
$server->middleware(($request, $response, $next) => {
    // 记录请求体数据
    $body = $request->body();
    
    // 记录到日志
    Log::info("请求体数据: " . $body);
    
    $next($request, $response);
})

// 审计日志中间件
$server->middleware(($request, $response, $next) => {
    $clientIP = $request->ip();
    $userAgent = $request->userAgent();
    $method = $request->method();
    $path = $request->path();
    $body = $request->body();
    
    // 记录审计日志
    $auditLog = {
        "timestamp": time(),
        "clientIP": $clientIP,
        "userAgent": $userAgent,
        "method": $method,
        "path": $path,
        "body": $body,
        "headers": $request->header()
    };
    
    Log::info("审计日志: " . json_encode($auditLog));
    
    $next($request, $response);
})

// 限流中间件示例
$rateLimitMap = new HashMap();

$server->middleware(($request, $response, $next) => {
    $clientIP = $request->ip();
    $currentTime = time();
    
    // 简单的限流逻辑
    $lastRequest = $rateLimitMap->get($clientIP);
    if ($lastRequest != null && ($currentTime - $lastRequest) < 1) {
        $response->writeHeader(429);
        $response->json({
            "error": "请求过于频繁，请稍后再试"
        });
        return;
    }
    
    $rateLimitMap->set($clientIP, $currentTime);
    $next($request, $response);
})

// 健康检查端点
$server->get("/health", ($request, $response) => {
    $response->json({
        "status": "healthy",
        "timestamp": time(),
        "version": "1.0.0"
    });
})

$server->get("/api/request-info", ($request, $response) => {
    $response->json({
        "method": $request->method(),
        "url": $request->url(),
        "fullUrl": $request->fullUrl(),
        "path": $request->path(),
        "ip": $request->ip(),
        "userAgent": $request->userAgent(),
        "isSecure": $request->isSecure()
    });
})

// 使用新的输入方法
$server->post("/api/user", ($request, $response) => {
    // 获取所有输入数据
    $allData = $request->all();
    
    // 只获取指定字段
    $userData = $request->only("name", "email", "age");
    
    // 排除指定字段
    $publicData = $request->except("password", "token");
    
    // 检查是否有指定字段
    if ($request->has("name")) {
        $name = $request->input("name");
        $response->json({
            "message": "用户创建成功",
            "name": $name,
            "allData": $allData,
            "userData": $userData,
            "publicData": $publicData
        });
    } else {
        $response->writeHeader(400);
        $response->json({
            "error": "缺少必要字段"
        });
    }
})

// 使用 bind 方法绑定到指定类
$server->post("/api/bind-user", ($request, $response) => {
    // 将请求数据绑定到 User 类
    $user = $request->bind("User");
    
    $response->json({
        "message": "用户数据绑定成功",
        "user": $user,
        "userName": $user->name,
        "userEmail": $user->email
    });
})

// 绑定到不同类的示例
$server->post("/api/bind-product", ($request, $response) => {
    // 将请求数据绑定到 Product 类
    $product = $request->bind("Product");
    
    $response->json({
        "message": "产品数据绑定成功",
        "product": $product,
        "productName": $product->name,
        "productPrice": $product->price
    });
})

// 请求体查看端点（用于调试）
$server->post("/api/debug/body", ($request, $response) => {
    $body = $request->body();
    
    $response->json({
        "message": "请求体数据获取成功",
        "body": $body,
        "bodyLength": strlen($body),
        "hasBody": strlen($body) > 0
    });
})

// 请求类型检查
$server->get("/api/check-request", ($request, $response) => {
    $checks = {
        "isGet": $request->isMethod("GET"),
        "isPost": $request->isMethod("POST"),
        "isSecure": $request->isSecure()
    };
    
    $response->json({
        "checks": $checks,
        "method": $request->method(),
        "path": $request->path(),
        "fullUrl": $request->fullUrl()
    });
})

// API 版本控制示例
$v1Group = $server->group("/api/v1");
$v2Group = $server->group("/api/v2");

$v1Group->get("/users", ($request, $response) => {
    $response->json({
        "version": "v1",
        "users": []
    });
})

$v2Group->get("/users", ($request, $response) => {
    $response->json({
        "version": "v2",
        "users": [],
        "metadata": {
            "total": 0,
            "page": 1
        }
    });
})

Log::info("http://127.0.0.1:8080");
$server->run();